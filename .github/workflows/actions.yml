name: Trigger PubDev Release

on:
  workflow_dispatch:

jobs:
  analyze-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Specify the path where the repository should be checked out
        with:
          path: my-repo

      - name: Pana analyzer
        uses: axel-op/dart-package-analyzer@v3
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
        id: pana-analysis

      - name: Set outputs
        id: set-outputs
        run: |
          echo "TOTAL=${{ steps.pana-analysis.outputs.total }}"
          echo "TOTAL_MAX=${{ steps.pana-analysis.outputs.total_max }}"
        # Set the working directory to the checked out repository
        working-directory: my-repo

      - name: Checking pana scores
        env:
          TOTAL: ${{ steps.pana-analysis.outputs.total }}
          TOTAL_MAX: ${{ steps.pana-analysis.outputs.total_max }}
        run: |
          PERCENTAGE=$(( $TOTAL ))
          if (( $PERCENTAGE < 110 )); then
            echo "Score too low!"
            exit 1
          fi

          echo "Score is satisfactory. Proceeding to build."
        # Set the working directory to the checked out repository
        working-directory: my-repo

  build-and-publish:
    runs-on: ubuntu-latest
    needs: analyze-package
    if: ${{ needs.analyze-package.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Specify the path where the repository should be checked out
        with:
          path: my-repo

      # Rest of your steps...

  release-on-push:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Specify the path where the repository should be checked out
        with:
          path: my-repo

      - name: Get latest release tag
        id: get_latest_tag
        run: echo ::set-output name=TAG::$(git -C my-repo describe --abbrev=0 --tags)

      - name: Create release tag
        id: create_tag
        run: |
          TAG=$(echo "${TAG}" | awk -F'[.]' '{print "v" $1 "." $2+1 ".0"}')
          git -C my-repo tag $TAG
          git -C my-repo push origin $TAG
